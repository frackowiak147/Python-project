# Wykorzystanie bibliotek
from sklearn.model_selection import train_test_split
from sklearn import model_selection, preprocessing, linear_model, naive_bayes, metrics
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FormatStrFormatter
import seaborn as sns
import pickle
# Pobranie funkcji z folderu functions.py
import seaborn as sns
import functions
# Import pakietu do modyfikacji tabel danych

import pandas as pd
# ----------------------------------------------------------------------------------------------------
path = 'Screen Time Data.csv'
df = pd.read_csv(path, encoding = "ISO-8859-1")  # zapis Dataframe do zmiennej
df.head()
df2 = df
del df2['Date']
del df2['Week Day']
# Poprawa wyswietlania zmiennych w tabeli

df.rename(columns={'Reading and Reference': 'Read & Ref'}, inplace=True)
df.rename(columns={'Health and Fitness': 'Fit'}, inplace=True)
df.rename(columns={'Total Screen Time ': 'Screen Time'}, inplace=True)
del df['index']
df.rename(columns={'Productivity': 'Product'}, inplace=True)
df.rename(columns={'Creativity': 'Creat'}, inplace=True)
df.rename(columns={'Entertainment': 'Ente'}, inplace=True)
table_joga = df.to_string()
tab_info = df.info()
# --------------------------------------------------------------------- #

chose = "9"
functions.powitanie()

while (chose!= "0"):

    functions.wyswietl()
    chose = input("Wpisz wybor: ")
    functions.wybory(chose, table_joga, tab_info)
    if chose == "3":
# Wykres pudelkowy

        df['Screen Time'].plot(kind='box')
        print("Total screen Time - Czas spedzony w telefonie [min]")
        plt.show()
        df['Social Networking'].plot(kind='box')
        print("Social Networking - Czas spedzony na portalach spolecznosciowych [min]")
        plt.show()
        df['Product'].plot(kind='box')
        print("Productivity - Produktywne czynnosci")
        plt.show()
        df['Read & Ref'].plot(kind='box')
        print("Reading & Reference -Czytanie, artykuły, podnoszenie umiejętności")
        plt.show()
# Histogram

    elif chose == "4":
        df['Other'].hist()
        print("Czestotliwosc wystepowania innych aktywnosci")
        plt.show()
# Funkcja wyswietlajca wartosci max i min z wszystkich kolumn

    elif chose == "5":
        def display_statistics():

            columns = [col for col in df.columns if col not in ['Date', 'Week Day']]
            statistics = {}
            for column_name in columns:
                mean = df[column_name].mean()
                median = df[column_name].median()
                mode = df[column_name].mode()[0]
                statistics[column_name] = {"Mean": mean, "Median": median, "Mode": mode}

            fig, ax = plt.subplots(figsize=(10, 5))
            ax.yaxis.set_major_formatter(FormatStrFormatter('%.2f'))
            plt.title('Statistics')
            plt.xlabel('Statistic')
            plt.ylabel('Value')
            for column_name, values in statistics.items():
                plt.bar(values.keys(), values.values(), label=column_name)
            plt.legend()
            plt.show()

        display_statistics()

# wyznaczenie macierzy korelacji

    elif chose == "6":
        korelacja = df2.corr()
        print(korelacja)
        fig, ax = plt.subplots(figsize=(10, 10))
        colormap = sns.color_palette("BrBG", 10)
        sns.heatmap(korelacja,
            cmap=colormap,
            annot=True,
            fmt=".2f")
        ax.set_yticklabels(df.columns);
        plt.show()

# Testowanie modeli

    elif chose == "7":
        print("Testowanie modeli:")
        X = df2.drop('Screen Time', axis=1).to_numpy()

        # Czas przed ekranem dane

        y = df2.drop('Screen Time', axis=1).to_numpy()

        # Podział zbioru na dane treningowe i testowe
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=12345)

        # Przygotowanie testu
        def train_model(classifier, feature_vector_train, label, feature_vector_valid):
            # trenuj model
            classifier.fit(feature_vector_train, label)

            with open('screen_classifier.pickle', 'wb') as handle:
                pickle.dump(classifier, handle)

            #  przewidywania modelu dla zbioru testowego
            predictions = classifier.predict(feature_vector_valid)

            #  ewaluacji modelu na podstawie danych testowych
            score_vals = [
                metrics.mean_squared_error(predictions, y_test),
                metrics.mean_absolute_error(predictions, y_test)
            ]
            return score_vals

        # MODEL 1 - regresja liniowa

        accuracy = train_model(linear_model.LinearRegression(), X_train, y_train, X_test)
        accuracy_compare = {'LR': accuracy}
        print("LR: ", accuracy)

        # MODEL 2 - RandomForestRegressor
        from sklearn.ensemble import RandomForestRegressor

        regressor = RandomForestRegressor(n_estimators=100, random_state=0)
        accuracy = train_model(regressor, X_train, y_train, X_test)
        accuracy_compare['random forrest tree'] = accuracy
        print('random forrest tree', accuracy)

        # porównanie modeli
        # MAE - mean abolute error
        # MSE - Mean Squared Error
        df_compare = pd.DataFrame(accuracy_compare, index=['mse', 'mae'])
        df_compare.plot(kind='bar')
        print("MAE - Mean Abolute Error (Sredni blad bezwzgledny)")
        print("MSE - Mean Squared Error- (Sredni blad do kwadratu)")
        plt.show()
